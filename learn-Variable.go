package main

//变量和常量，来历是为了方便查找内存地址，所以利用变量将数据的内存地址保存起来，后期可通过变量找到内存上对应的数据。
//常用变量类型：整型、浮点型、布尔型等。
//变量需要申明后才可使用，同一作用域，不支持重复申明，申明格式：var 变量名 变量类型  申明关键词var开头，变量类型放在变量的后面，行尾无需分号。例子：var name string
//var (       批量申明变量
//	a string
//	b int
//	c bool
//	d float32
//)

//#######变量初始化
//整型和浮点型变量的默认值为0。 字符串变量的默认值为空字符串。 布尔型变量默认为false。 切片、函数、指针变量的默认为nil
//var name string = "pprof.cn"
//var sex int = 1
//或者
//var name, sex = "pprof.cn", 1
//###################################
//import (
//"fmt"
//)
//// 全局变量m
//var m = 100
//
//func main() {
//	n := 10  //函数中可以使用：=方式申明初始化变量
//	m := 200 // 此处声明局部变量m
//	fmt.Println(m, n)
//}
//输出结果：
//200 10

//###################匿名变量
//func foo() (int, string) {
//	return 10, "Q1mi"
//}
//func main() {
//	x, _ := foo()  //匿名变量（anonymous variable），匿名变量用一个下划线_表示，匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。 (在Lua等编程语言里，匿名变量也被叫做哑元变量。)
//	_, y := foo()
//	fmt.Println("x=", x)
//	fmt.Println("y=", y)
//}
//输出结果：
//x= 10
//y= Q1mi
//注意：函数外的每个语句都必须以关键字开始（var、const、func等），:=不能使用在函数外,_多用于占位，表示忽略值。


//#########常量
//常量是恒古不变的值，多用于定义程序运行期间不会改变的那些值，常量的声明和变量的声明非常类似，只要把var换成const即可，常量定义的时候必须赋值。
//const name=wulaoer ，申明了name的常量是wulaoer之后，整个程序运行期间的值都不会改变，多个常量也是一样：
//const （
//  name = wulaoer
//  age = 27
//）
//如果多个常量的值相同，可以设置
//const (
//	n1 = 100
//	n2
//	n3
//)     //表示常量n1，n2，n3的值都是一样的

//##############iota是go语言的常量计数器，iota在const关键字出现时，被重置为0，
//const (
//	n1 = iota //0
//	n2        //1
//	n3        //2
//	n4        //3
//)
//或者
//const (
//	n1 = iota //0
//	n2        //1
//	_               //使用_跳过某些值
//	n4        //3
//)
//iota申明中插队
//const (
//	n1 = iota //0
//	n2 = 100  //100  插队的值不影响后面的值初始化
//	n3 = iota //2
//	n4        //3
//)
//const n5 = iota //0

//定义数量级 （这里的<<表示左移操作，1<<10表示将1的二进制表示向左移10位，也就是由1变成了10000000000，也就是十进制的1024。同理2<<2表示将2的二进制表示向左移2位，也就是由10变成了1000，也就是十进制的8。）

//const (
//	_  = iota
//	KB = 1 << (10 * iota)
//	MB = 1 << (10 * iota)
//	GB = 1 << (10 * iota)
//	TB = 1 << (10 * iota)
//	PB = 1 << (10 * iota)
//)

//或者多个iota定义在一行

//const (
//	a, b = iota + 1, iota + 2 //1,2
//	c, d                      //2,3
//	e, f                      //3,4
//)